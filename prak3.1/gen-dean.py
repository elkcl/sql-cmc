import csv
import json
from russian_names import RussianNames
from random import choice, choices, randint

letters = "ЦУКЕНГШЗХФВАПРОЛДЖЭЯЧСМИТБЮ"
degrees = ["бакалавр", "магистр", "кандидат", "доктор"]
cities = """Москва
Санкт-Петербург
Новосибирск
Екатеринбург
Нижний Новгород
Казань
Самара
Омск
Челябинск
Ростов-на-Дону
Уфа
Пермь
Волгоград
Красноярск
Воронеж
Саратов
Тольятти
Краснодар
Ижевск
Ярославль
Ульяновск
Барнаул
Хабаровск
Иркутск
Тюмень
Владивосток
Новокузнецк
Оренбург
Кемерово
Набережные Челны
Рязань
Томск
Пенза
Астрахань
Липецк
Тула
Махачкала
Киров
Чебоксары
Калининград
Курск
Магнитогорск
Тверь
Брянск
Иваново
Улан-Удэ
Нижний Тагил
Ставрополь
Белгород
Архангельск
Сочи
Владимир
Калуга
Курган
Орёл
Смоленск
Владикавказ
Череповец
Чита
Мурманск
Волжский
Сургут
Саранск
Вологда
Тамбов
Стерлитамак
Петрозаводск
Кострома
Комсомольск-на-Амуре
Нальчик
Якутск
Таганрог
Грозный
Нижневартовск
Братск
Йошкар-Ола
Шахты
Орск
Дзержинск
Ангарск
Сыктывкар
Новороссийск
Нижнекамск
Старый Оскол
Бийск
Великий Новгород
Прокопьевск
Энгельс
Рыбинск
Благовещенск
Норильск
Балашиха
Балаково
Петропавловск-Камчатский
Псков
Химки
Армавир
Златоуст
Северодвинск
Подольск
Сызрань
Новочеркасск
Королёв
Южно-Сахалинск
Волгодонск
Находка
Мытищи
Березники
Абакан
Люберцы
Салават
Рубцовск
Майкоп
Уссурийск
Миасс
Коломна
Ковров
Электросталь
Пятигорск
Альметьевск
Назрань
Копейск
Первоуральск
Новомосковск
Хасавюрт
Кисловодск
Невинномысск
Димитровград
Новочебоксарск
Серпухов
Орехово-Зуево
Новый Уренгой
Нефтекамск
Нефтеюганск
Муром
Черкесск
Ногинск
Камышин
Новошахтинск
Дербент
Ноябрьск
Новокуйбышевск
Елец
Кызыл
Ачинск
Октябрьский
Одинцово
Щёлково
Северск
Сергиев Посад
Обнинск
Арзамас
Жуковский
Междуреченск
Батайск
Красногорск
Киселёвск
Ухта
Элиста
Артём
Новотроицк""".split()

subject_names = '''Философия
История
Иностранный язык
Безопасность жизнедеятельности
Физическая культура и спорт
Русский язык и культура речи
Основы права
Экономика
Психология социального взаимодействия
Введение в сквозные цифровые технологии
Основы проектной деятельности
Основы учебной и научно-исследовательской деятельности
Социология
Микроэкономика
Макроэкономика
Математика
Информационные технологии и системы в экономике
Статистика
Эконометрика
Бухгалтерский учет и отчетность
Финансы
Мировая экономика
Менеджмент
Маркетинг
Экономика фирмы
Деньги, кредит, банки
Экономический анализ
Институциональная экономика
Теория бухгалтерского учета
Бухгалтерский финансовый учет
Комплексный экономический анализ хозяйственной деятельности
Бухгалтерский управленческий учет
Лабораторный практикум бухгалтерского учета
Анализ финансовой отчетности
Бухгалтерская финансовая отчетность
Бюджетный учет и отчетность
Налоги и налогообложение
Аудит
Бухгалтерский учет в коммерческом банке
Международные стандарты финансовой отчетности
Налоговый учет и отчетность
Элективные дисциплины по физической культуре и спорту
Деловой иностранный язык
Риторика
Язык делопроизводства
Коммуникативный курс японского языка
Коммуникативный курс китайского языка
Коммуникативный курс корейского языка
Коммуникативный курс английского языка
Профессионально ориентированный перевод
Экономический перевод
Коммуникативный курс русского языка
Основы экологии и охраны природы Арктики
Экология Якутии
Общая и промышленная экология Севера
Экологическая безопасность территорий циркумполярного мира
Качество и уровень жизни населения циркумполярных регионов мира
Введение в циркумполярное регионоведение
Геосоциальное пространство Севера
Введение в межкультурную коммуникацию
Этноконфликтология
Геокультурное пространство Арктики
Якутский язык в профессиональной деятельности
Коммуникативный курс якутского языка
Разговорный якутский язык
Культура и традиции народов СВ РФ
Культурные индустрии Севера
Арктическое кино
Семиотика культуры
Этническая психология
Психология межкультурного общения
Русская литература и художественная культура
Патриотическая литература России
Особенности учета в отраслях экономики
Экономический анализ в отраслях
Цифровая среда в бухгалтерском учете
Информационно-аналитическое обеспечение аудита
Учет в торговых организациях
Учет в строительных организациях
Учет и анализ банкротства
Учет и анализ ВЭД
Учет в некоммерческих организациях
Учет и налогообложение на предприятиях малого бизнеса
Практикум по налогообложению
Налоговый аудит
Судебно-бухгалтерская экспертиза
Контроль и ревизия'''.split('\n')


MAJORS_CNT = 10 ** 6
MENTORS_CNT = 10 ** 6
STUDENTS_MIN_CNT = 10 ** 8
QUOTA = STUDENTS_MIN_CNT // MAJORS_CNT + 1

def main():
    print('generating names...')
    names = RussianNames(count=10**5, output_type='tuple').get_batch()
    print('running choices...')
    full_names = choices(names, k=((QUOTA + QUOTA // 10) * MAJORS_CNT + MENTORS_CNT))
    person_id = 0
    print('names generated!')
    with open('mentors.csv', 'w', newline='') as mentor_csv:
        mentor_fields = ['mentor_id', 'last_name', 'first_name', 'patronym', 'personal_info']
        mentor_writer = csv.DictWriter(mentor_csv, fieldnames=mentor_fields)
        for i in range(1, MENTORS_CNT + 1):
            full_name = full_names[person_id]
            person_id += 1
            mentor_writer.writerow({
                'mentor_id': i,
                'last_name': full_name[2],
                'first_name': full_name[0],
                'patronym': full_name[1] if randint(1, 100) <= 95 else None,
                'personal_info': json.dumps({
                    'city': choice(cities),
                    'experience_years': randint(3, 40)
                })
            })
    print('mentors generated!')
    with open('majors.csv', 'w', newline='') as major_csv:
        major_fields = ['major_id', 'name', 'free_places', 'paid_places', 'free_students', 'paid_students', 'subjects', 'duration']
        major_writer = csv.DictWriter(major_csv, fieldnames=major_fields)
        with open('students.csv', 'w', newline='') as student_csv:
            student_fields = ['student_id', 'major_id', 'mentor_id', 'last_name', 'first_name', 'patronym', 'enrollment_year', 'tuition_type', 'personal_info']
            student_writer = csv.DictWriter(student_csv, fieldnames=student_fields)
            student_id = 1
            for i in range(1, MAJORS_CNT + 1):
                stud_cnt = randint(QUOTA, QUOTA + QUOTA // 10)
                free_students = randint(0, stud_cnt)
                paid_students = stud_cnt - free_students
                major_writer.writerow({
                    'major_id': i,
                    'name': ''.join(choices(letters, k=7)),
                    'free_students': free_students,
                    'paid_students': paid_students,
                    'free_places': randint(free_students, free_students + free_students // 10),
                    'paid_places': randint(paid_students, paid_students + paid_students // 10),
                    'duration': randint(3, 6),
                    'subjects': '{' + ','.join(choices(subject_names, k=randint(1,10))) + '}'
                })
                for j in range(stud_cnt):
                    full_name = full_names[person_id]
                    person_id += 1
                    birthyear = randint(1900, 2010)
                    student_writer.writerow({
                        'student_id': student_id,
                        'major_id': i,
                        'mentor_id': randint(1, MENTORS_CNT) if randint(1, 10) <= 8 else None,
                        'last_name': full_name[2],
                        'first_name': full_name[0],
                        'patronym': full_name[1] if randint(1, 100) <= 95 else None,
                        'enrollment_year': birthyear + randint(17, 25),
                        'tuition_type': 'бюджет' if j < free_students else 'контракт',
                        'personal_info': json.dumps({
                            'city': choice(cities),
                            'birthday': {
                                'year': birthyear,
                                'month': randint(1, 12),
                                'day': randint(1, 28)
                            }
                        }),
                    })
                    student_id += 1
    print('majors and students generated!')



if __name__ == '__main__':
    main()
